name: "Release"

on:
  push:
    tags:
      - 'v[0-9]+.*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  verify-tag:
    name: "Verify tag"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: "Get current branch"
        id: get_branch
        run: |
          set -euo pipefail
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "BRANCH=$branch" >> $GITHUB_OUTPUT
          echo "Tagged on branch $branch."
      - name: "Exit if not on main branch"
        if: steps.get_branch.outputs.BRANCH != 'main'
        run: exit -1
      - name: "Get package tag"
        id: "get_pkg_tag"
        shell: "bash"
        run: |
          echo PKG_VERSION="v$(awk -F ' = ' '$1 ~ /^version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: "Exit if mismatch between git tag and pkg version"
        if: steps.get_pkg_tag.outputs.PKG_VERSION != github.ref_name
        run: exit -1
  verify-release-draft:
    name: "Verify release draft exists"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write # needed to be able to access draft releases
    outputs:
      releaseId: ${{ fromJSON(steps.get_gh_release.outputs.RELEASE_JSON).databaseId }}
    steps:
      - name: "Get draft release for git tag"
        id: "get_gh_release"
        run: |
          set -euo pipefail
          echo RELEASE_JSON=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d '{ "query": "query { repository(owner:\"kamphaus\", name:\"upt\") { releases(orderBy:{field: CREATED_AT, direction: DESC}, first: 10) { nodes { id, isDraft, name, databaseId } } } }" }' https://api.github.com/graphql | jq '.data.repository.releases.nodes[] | select(.name=="${{ github.ref_name }}") // {}') >> $GITHUB_OUTPUT
      - name: "Exit if no draft release exists with name corresponding to git tag"
        if: fromJSON(steps.get_gh_release.outputs.RELEASE_JSON).isDraft != true
        run: exit -1
  tests: # Require that the regular build and tests (including build, test, lint, other checks) are ok.
    name: "Require ok tests"
    needs: [ "verify-tag", "verify-release-draft" ]
    uses: ./.github/workflows/rust.yml
  release-tag:
    name: "Link release with tag"
    needs: [ "verify-release-draft", "tests" ]
    permissions:
      contents: write # needed to be able to access draft releases
    runs-on: ubuntu-latest
    steps:
      - name: "Update the tag of the draft release with the name corresponding to the tag name"
        run: |
          set -euo pipefail
          curl -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/kamphaus/upt/releases/${{ needs.verify-release-draft.outputs.releaseId }} -d '{"tag_name":"${{ github.ref_name }}"}'
  build-release:
    name: "Build release binaries"
    runs-on: ${{ matrix.config.os }}
    needs: [ "release-tag" ]
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - {os: ubuntu-latest, toolchain: stable, target: x86_64-unknown-linux-gnu, cross: false}
          - {os: ubuntu-latest, toolchain: stable, target: aarch64-unknown-linux-gnu, cross: true}
          - {os: ubuntu-latest, toolchain: stable, target: arm-unknown-linux-gnueabi, cross: true}
          - {os: ubuntu-latest, toolchain: stable, target: armv7-unknown-linux-gnueabihf, cross: true}
          # mips and powerpc are not compatible with ring v0.16.10, so they are disabled for now
          #          - {os: ubuntu-latest, target: mips64el-unknown-linux-gnuabi64, cross: true}
          #          - {os: ubuntu-latest, target: powerpc64le-unknown-linux-gnu, cross: true}
          - {os: ubuntu-latest, toolchain: stable,  target: x86_64-unknown-linux-musl, cross: true}
          #- {os: ubuntu-latest, toolchain: stable, target: aarch64-linux-android, cross: true}
          # Macos
          - {os: macos-latest, toolchain: stable, target: aarch64-apple-darwin, cross: false}
          - {os: macos-latest, toolchain: stable, target: x86_64-apple-darwin, cross: false}
          # Windows
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu, cross: false}
          - {os: windows-latest, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc, cross: false}
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
      - uses: Swatinem/rust-cache@v2
      - name: "Checkout code"
        uses: actions/checkout@v5
      - name: Build upt
        if: matrix.config.cross == false
        run: "cargo rustc --release --target ${{ matrix.config.target }}"
      - name: Install tool cross for crosscompile
        uses: baptiste0928/cargo-install@v3
        if: matrix.config.cross == true
        with:
          crate: cross
      - name: Build upt (crosscompile)
        if: matrix.config.cross == true
        run: "cross rustc --release --target ${{ matrix.config.target }}"
      - name: "Pack binaries if unix"
        if: matrix.config.os != 'windows-latest'
        run: tar -C ./target/${{ matrix.config.target }}/release -czvf upt-${{ github.ref_name }}-${{ matrix.config.target }}.tar.gz upt
      - name: "Pack binaries if windows"
        if: matrix.config.os == 'windows-latest'
        run: compress-archive ./target/${{ matrix.config.target }}/release/upt.exe upt-${{ github.ref_name }}-${{ matrix.config.target }}.zip
      - name: "Troubleshoot if unix"
        if: matrix.config.os != 'windows-latest'
        run: "ls -al"
      - name: "Troubleshoot if windows"
        if: matrix.config.os == 'windows-latest'
        run: "ls"
      - name: "Upload artifacts if unix"
        uses: actions/upload-artifact@v4
        if: matrix.config.os != 'windows-latest'
        with:
          name: release-artifacts-${{ matrix.config.target }}
          path: upt*.tar.gz
      - name: "Upload artifacts if windows"
        uses: actions/upload-artifact@v4
        if: matrix.config.os == 'windows-latest'
        with:
          name: release-artifacts-${{ matrix.config.target }}
          path: upt*.zip
  sbom:
    name: "Generate SBOM"
    runs-on: "ubuntu-latest"
    needs: [ "release-tag" ]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5
      - name: "Create SBOM"
        uses: anchore/sbom-action@v0
        with:
          upload-artifact: false
          upload-release-assets: false
          output-file: ./upt-release-sbom.spdx.json
      - name: "Upload SBOM artifact"
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-sbom
          path: upt-release-sbom.spdx.json
  upload-artifacts:
    name: "Upload binaries to release"
    runs-on: "ubuntu-latest"
    needs: [ "build-release", "sbom" ]
    outputs:
      digests: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v6
        with:
          path: "binaries"
          pattern: release-artifacts-*
          merge-multiple: true
      - name: "Generate subject for provenance"
        id: hash
        run: |
          set -exuo pipefail
          # List the artifacts the provenance will refer to.
          cd binaries
          ls -al
          files=$(ls upt*)
          # For convenience we save all checksums in a file to be published in release
          sha256sum $files > upt-checksums.txt
          # Checksums file will also be covered by SLSA
          files=$(ls upt*)
          # Generate the subjects (base64 encoded).
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "${GITHUB_OUTPUT}"
      - name: "Upload binaries to release"
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "binaries/*"
          updateOnlyUnreleased: true
          omitBodyDuringUpdate: true
  provenance:
    needs: [ "upload-artifacts" ] # The release needs to be associated to a tag for the SLSA workflow to publish the signature successfully
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.upload-artifacts.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
