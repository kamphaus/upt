name: "Release"

on:
  push:
    tags:
      - 'v[0-9]+.*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  verify-tag:
    name: "Verify tag"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Get current branch"
        id: get_branch
        run: |
          set -euo pipefail
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "BRANCH=$branch" >> $GITHUB_OUTPUT
          echo "Tagged on branch $branch."
      - name: "Exit if not on main branch"
        if: steps.get_branch.outputs.BRANCH != 'main'
        run: exit -1
      - name: "Get package tag"
        id: "get_pkg_tag"
        shell: "bash"
        run: |
          echo PKG_VERSION="v$(awk -F ' = ' '$1 ~ /^version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: "Exit if mismatch between git tag and pkg version"
        if: steps.get_pkg_tag.outputs.PKG_VERSION != github.ref_name
        run: exit -1
  verify-release-draft:
    name: "Verify release draft exists"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write # needed to be able to access draft releases
    outputs:
      releaseId: ${{ fromJSON(steps.get_gh_release.outputs.RELEASE_JSON).id }}
    steps:
      - name: "Get draft release for git tag"
        id: "get_gh_release"
        run: |
          set -euo pipefail
          echo RELEASE_JSON=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d '{ "query": "query { repository(owner:\"kamphaus\", name:\"upt\") { releases(orderBy:{field: CREATED_AT, direction: DESC}, first: 10) { nodes { id, isDraft, name } } } }" }' https://api.github.com/graphql | jq '.data.repository.releases.nodes[] | select(.name=="${{ github.ref_name }}") // {}') >> $GITHUB_OUTPUT
      - name: "Exit if no draft release exists with name corresponding to git tag"
        if: fromJSON(steps.get_gh_release.outputs.RELEASE_JSON).isDraft != true
        run: exit -1
  tests: # Require that the regular build and tests (including build, test, lint, other checks) are ok.
    name: "Require ok tests"
    needs: [ "verify-tag", "verify-release-draft" ]
    uses: ./.github/workflows/rust.yml
  release-tag:
    name: "Link release with tag"
    needs: [ "verify-release-draft", "tests" ]
    permissions:
      contents: write # needed to be able to access draft releases
    runs-on: ubuntu-latest
    steps:
      - name: "Update the tag of the draft release with the name corresponding to the tag name"
        run: |
          set -euo pipefail
          curl -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/kamphaus/upt/releases/${{ needs.verify-release-draft.outputs.releaseId }} -d '{"tag_name":"${{ github.ref_name }}"}'
  build-release:
    name: "Build release binaries"
    runs-on: "ubuntu-latest"
    needs: [ "release-tag" ]
    steps:
      - name: "Run build commands"
        run: "echo 'Success...'"
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: path/to/artifact/world.txt
  upload-artifacts:
    name: "Upload binaries to release"
    runs-on: "ubuntu-latest"
    needs: [ "build-release" ]
    outputs:
      digests: ${{ steps.hash.outputs.digests }}
    permissions:
      contents: write
    steps:
      - name: "Create SBOM"
        uses: anchore/sbom-action@v0
      - uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: "binaries"
      - name: "Upload binaries to release"
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "binaries/*"
          draft: true
          updateOnlyUnreleased: true
          omitBodyDuringUpdate: true
      - name: "Generate subject for provenance"
        id: hash
        run: |
          set -exuo pipefail
          cp upt-release-sbom* binaries/
          # List the artifacts the provenance will refer to.
          cd binaries
          ls -al
          files=$(ls upt*)
          # Generate the subjects (base64 encoded).
          echo "hashes=$(sha256sum $files | base64 -w0)" >> "${GITHUB_OUTPUT}"
  troubleshoot:
    name: "Publish release"
    runs-on: "ubuntu-latest"
    needs: ["upload-artifacts"]
    steps:
      - name: "Stop here for now"
        run: "exit -1"
  publish-release:
    name: "Publish release"
    needs: [ "troubleshoot", "verify-release-draft", "upload-artifacts" ]
    permissions:
      contents: write # needed to be able to access draft releases
    runs-on: ubuntu-latest
    steps:
      - name: "Publish the draft release"
        run: |
          set -euo pipefail
          curl -L -X PATCH -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/kamphaus/upt/releases/${{ needs.verify-release-draft.outputs.releaseId }} -d '{"draft":"false"}'
  provenance:
    needs: [ "upload-artifacts", "publish-release" ] # The release needs to be associated to a tag for the SLSA workflow to publish the signature successfully
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.upload-artifacts.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
